(()=>{"use strict";const e=()=>{let e=localStorage.getItem("myProject");return e?JSON.parse(e):[]},t=(e,t)=>{let o,r=JSON.parse(localStorage.getItem("myProject"));r.map(((c,n)=>{c.name==t.name&&e===t?(r.splice(n,1),o=JSON.stringify(r),localStorage.setItem("myProject",o)):c.name==t.name&&(r.splice(n,1,e),o=JSON.stringify(r),localStorage.setItem("myProject",o))}))},o=e=>{localStorage.setItem("currentProject",JSON.stringify(e))},r=()=>{let e=localStorage.getItem("currentProject");return e?JSON.parse(e):null},c=e=>{let t=(e=>{let t=[];return e.todo.forEach((e=>{let o=`\n    <tr class='${e.checked?"complete":e.priority}'>\n      <td>${e.title}</td>\n      <td>${e.due}</td>\n      <td>${e.priority}</td>\n      <td>\n        <button class='progress'>\n          ${e.checked?"<span class='material-icons'>task_alt</span>":"<span class='material-icons'>remove_circle_outline</span>"}\n        </button>\n      </td>\n      <td><button class='edit-todo'><span class="material-icons">zoom_in</span></button></td>\n      <td><button class='delete-todo'><span class="material-icons">delete_forever</span></button></td>\n    </tr>`;t.push(o)})),t})(e);return t?t.map((e=>e)).join(""):[]},n=document.getElementsByClassName("modal"),l=document.querySelector(".project"),s=document.querySelector(".toggle-project"),a=document.querySelectorAll(".toggle-icons"),d=document.getElementById("add-project"),i=document.querySelector(".new-project-form-modal"),m=document.querySelector(".new-project-form"),u=document.getElementsByClassName("cancel"),p=document.querySelector(".project-list"),g=document.querySelector(".project-body"),y=document.querySelector(".project-name"),S=document.querySelector(".todo-list"),f=document.getElementsByClassName("list-item");s.onclick=()=>{l.classList.toggle("active"),a.forEach((e=>e.classList.toggle("hidden")))},d.onclick=()=>{i.classList.toggle("hidden")},m.addEventListener("submit",(t=>{let r={name:t.target.elements.name.value,todo:[]};(t=>{let o=e();o.push(t),localStorage.setItem("myProject",JSON.stringify(o))})(r),o(r)})),Array.from(u).forEach((e=>{let t=e.closest("section");e.onclick=()=>{t.classList.toggle("hidden")}})),window.addEventListener("click",(e=>{e.target.className.split(" ").some((e=>"modal"==e))&&Array.from(n).forEach((e=>{e.classList.add("hidden")}))})),e().map((e=>{let t=document.createElement("li");t.innerHTML=e.name,t.classList.add("list-item"),p.appendChild(t)})),(()=>{let t=Array.from(f);t.forEach((t=>{t.addEventListener("click",(n=>{r(n);let l=(t=>e().find((e=>e.name==t)))(t.textContent);o(l),y.innerHTML=l.name,S.innerHTML=c(l),g.classList.remove("hidden")}))}));const r=e=>{t=Array.from(f),t.forEach((e=>{e.classList.remove("selected")})),e.target.classList.add("selected")}})();const h=document.querySelector(".project-body"),j=document.querySelector(".project-name"),L=document.querySelector(".edit-project-form-modal"),q=document.querySelector(".edit-project-form"),v=document.querySelector(".edit-project"),E=document.querySelector(".delete-project"),k=document.querySelector(".new-todo-form-modal"),b=document.querySelector(".new-todo-form"),N=document.querySelector(".new-todo"),I=document.querySelector(".todo-list");0==e().length&&h.classList.add("hidden"),(()=>{let e=r();e&&(j.innerHTML=e.name,h.classList.remove("hidden"),I.innerHTML=c(e))})(),v.onclick=()=>{L.classList.toggle("hidden")},q.addEventListener("submit",(e=>{let c=r(),n=r();n.name=e.target.elements.name.value,o(n),t(n,c)})),E.addEventListener("click",(()=>{if(!confirm("Delete this project?"))return;let e=r(),o=r();localStorage.removeItem("currentProject"),t(o,e),location.reload()})),N.onclick=()=>{k.classList.toggle("hidden")},b.addEventListener("submit",(e=>{let c=(e=>{let t=e.target.elements;return{title:t.title.value,due:t.due.value,priority:t.priority.value,checked:!1}})(e),n=r(),l=r();l.todo.push(c),o(l),t(l,n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,