(()=>{"use strict";const e=()=>{let e=localStorage.getItem("myProject");return e?JSON.parse(e):[]},t=(e,t)=>{let o,r=JSON.parse(localStorage.getItem("myProject"));r.map(((n,c)=>{n.name==t.name&&e===t?(r.splice(c,1),o=JSON.stringify(r),localStorage.setItem("myProject",o)):n.name==t.name&&(r.splice(c,1,e),o=JSON.stringify(r),localStorage.setItem("myProject",o))}))},o=e=>{localStorage.setItem("currentProject",JSON.stringify(e))},r=()=>{let e=localStorage.getItem("currentProject");return e?JSON.parse(e):null},n=e=>{let t=(e=>{let t=[];return e.todo.forEach((e=>{let o=`\n    <tr class='${e.checked?"complete":e.priority}'>\n      <td>${e.title}</td>\n      <td>${e.due}</td>\n      <td>${e.priority}</td>\n      <td>\n        <button class='progress'>\n          ${e.checked?"<span class='material-icons'>task_alt</span>":"<span class='material-icons'>remove_circle_outline</span>"}\n        </button>\n      </td>\n      <td><button class='edit-todo'><span class="material-icons">zoom_in</span></button></td>\n      <td><button class='delete-todo'><span class="material-icons">delete_forever</span></button></td>\n    </tr>`;t.push(o)})),t})(e);return t?t.map((e=>e)).join(""):[]},c=document.getElementsByClassName("modal"),l=document.querySelector(".project"),a=document.querySelector(".toggle-project"),s=document.querySelectorAll(".toggle-icons"),d=document.getElementById("add-project"),i=document.querySelector(".new-project-form-modal"),m=document.querySelector(".new-project-form"),u=document.getElementsByClassName("cancel"),p=document.querySelector(".project-list"),g=document.querySelector(".project-body"),y=document.querySelector(".project-name"),S=document.querySelector(".todo-list");a.onclick=()=>{l.classList.toggle("active"),s.forEach((e=>e.classList.toggle("hidden")))},d.onclick=()=>{i.classList.toggle("hidden")},m.addEventListener("submit",(t=>{let r={name:t.target.elements.name.value,todo:[]};(t=>{let o=e();o.push(t),localStorage.setItem("myProject",JSON.stringify(o))})(r),o(r)})),Array.from(u).forEach((e=>{let t=e.closest("section");e.onclick=()=>{t.classList.toggle("hidden")}})),window.addEventListener("click",(e=>{e.target.className.split(" ").some((e=>"modal"==e))&&Array.from(c).forEach((e=>{e.classList.add("hidden")}))})),e().map((e=>{let t=document.createElement("li");t.innerHTML=e.name,t.classList.add("list-item"),p.appendChild(t)})),(()=>{let t=document.getElementsByClassName("list-item");Array.from(t).forEach((t=>{t.addEventListener("click",(()=>{let r=(t=>e().find((e=>e.name==t)))(t.textContent);o(r),y.innerHTML=r.name,S.innerHTML=n(r),g.classList.remove("hidden")}))}))})();const j=document.querySelector(".project-body"),h=document.querySelector(".project-name"),f=document.querySelector(".edit-project-form-modal"),L=document.querySelector(".edit-project-form"),q=document.querySelector(".edit-project"),v=document.querySelector(".delete-project"),E=document.querySelector(".new-todo-form-modal"),k=document.querySelector(".new-todo-form"),b=document.querySelector(".new-todo"),N=document.querySelector(".todo-list");0==e().length&&j.classList.add("hidden"),(()=>{let e=r();e&&(h.innerHTML=e.name,j.classList.remove("hidden"),N.innerHTML=n(e))})(),q.onclick=()=>{f.classList.toggle("hidden")},L.addEventListener("submit",(e=>{let n=r(),c=r();c.name=e.target.elements.name.value,o(c),t(c,n)})),v.addEventListener("click",(()=>{if(!confirm("Delete this project?"))return;let e=r(),o=r();localStorage.removeItem("currentProject"),t(o,e),location.reload()})),b.onclick=()=>{E.classList.toggle("hidden")},k.addEventListener("submit",(e=>{let n=(e=>{let t=e.target.elements;return{title:t.title.value,due:t.due.value,priority:t.priority.value,checked:!1}})(e),c=r(),l=r();l.todo.push(n),o(l),t(l,c)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,