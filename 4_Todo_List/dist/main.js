(()=>{"use strict";const e=()=>{let e=localStorage.getItem("myProject");return e?JSON.parse(e):[]},t=e=>{localStorage.setItem("currentProject",JSON.stringify(e))},c=document.querySelector(".project"),o=document.querySelector(".toggle-project"),r=document.querySelectorAll(".toggle-icons"),l=document.getElementById("add-project"),n=document.querySelector(".new-project-form-modal"),a=document.querySelector(".new-project-form"),d=document.getElementsByClassName("cancel"),m=document.querySelector(".project-list"),s=document.querySelector(".project-body"),i=document.querySelector(".project-name");o.onclick=()=>{c.classList.toggle("active"),r.forEach((e=>e.classList.toggle("hidden")))},l.onclick=()=>{n.classList.toggle("hidden")},a.addEventListener("submit",(c=>{let o={name:c.target.elements.name.value,todo:[]};(t=>{let c=e();c.push(t),localStorage.setItem("myProject",JSON.stringify(c))})(o),t(o)})),Array.from(d).forEach((e=>{e.onclick=()=>{n.classList.toggle("hidden")}})),e().map(((e,t)=>{let c=document.createElement("li");c.innerHTML=e.name,c.classList.add("list-item"),m.appendChild(c)})),(()=>{let c=document.getElementsByClassName("list-item");Array.from(c).forEach((c=>{c.addEventListener("click",(()=>{let r=(l=c.textContent,e().find((e=>e.name==l)));var l;t(r),o(r),s.classList.remove("hidden")}))}));let o=e=>{i.innerHTML=e.name}})();const u=document.querySelector(".project-body"),g=document.querySelector(".project-name");document.querySelector(".cancel"),document.querySelector(".edit-project"),document.querySelector(".delete-project"),0==e().length&&u.classList.add("hidden"),(()=>{let e=(()=>{let e=localStorage.getItem("currentProject");return e?JSON.parse(e):null})();e&&(g.innerHTML=e.name,u.classList.remove("hidden"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,